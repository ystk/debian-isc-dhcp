#!/bin/bash
# dhclient-script for GNU/kFreeBSD. Aurelien Jarno, May, 2005.
# Based on Linux and FreeBSD scripts.

export PATH=/lib/freebsd:$PATH

# update /etc/resolv.conf based on received values
make_resolv_conf() {
    local new_resolv_conf

    if [ -n "$new_domain_search" ] || [ -n "$new_domain_name" ] ||
       [ -n "$new_domain_name_servers" ]; then
        new_resolv_conf=/etc/resolv.conf.dhclient-new
        rm -f $new_resolv_conf

        if [ -n "$new_domain_name" ]; then
            echo domain ${new_domain_name%% *} >>$new_resolv_conf
        fi

        if [ -n "$new_domain_search" ]; then
            if [ -n "$new_domain_name" ]; then
                new_domain_search="$new_domain_name $new_domain_search"
            fi
            echo "search ${new_domain_search}" >> $new_resolv_conf
        elif [ -n "$new_domain_name" ]; then
            echo "search ${new_domain_name}" >> $new_resolv_conf
        fi

        if [ -n "$new_domain_name_servers" ]; then
            for nameserver in $new_domain_name_servers; do
                echo nameserver $nameserver >>$new_resolv_conf
            done
        else # keep 'old' nameservers
            sed -n /^\w*[Nn][Aa][Mm][Ee][Ss][Ee][Rr][Vv][Ee][Rr]/p /etc/resolv.conf >>$new_resolv_conf
        fi

	if [ -f /etc/resolv.conf ]; then
	    chown --reference=/etc/resolv.conf $new_resolv_conf
            chmod --reference=/etc/resolv.conf $new_resolv_conf
	fi
        mv -f $new_resolv_conf /etc/resolv.conf
    fi
}

# set host name
set_hostname() {
    local current_hostname

    if [ -n "$new_host_name" ]; then
        current_hostname=$(hostname)

        # current host name is empty, '(none)' or 'localhost' or differs from new one from DHCP
        if [ -z "$current_hostname" ] ||
           [ "$current_hostname" = '(none)' ] ||
           [ "$current_hostname" = 'localhost' ] ||
           [ "$new_host_name" != "$current_hostname" ]; then
            hostname "$new_host_name"
        fi
    fi
}

# run given script
run_hook() {
    local script
    local exit_status
    script="$1"
    shift	# discard the first argument, then the rest are the script's

    if [ -f $script ]; then
        . $script "$@"
    fi

    if [ -n "$exit_status" ] && [ "$exit_status" -ne 0 ]; then
        logger -p daemon.err "$script returned non-zero exit status $exit_status"
    fi

    return $exit_status
}

# run scripts in given directory
run_hookdir() {
    local dir
    local exit_status
    dir="$1"
    shift	# See run_hook

    if [ -d "$dir" ]; then
        for script in $(run-parts --list $dir); do
            run_hook $script "$@" || true
            exit_status=$?
        done
    fi

    return $exit_status
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
    exit_status=$1

    # Source the documented exit-hook script, if it exists
    if ! run_hook /etc/dhcp/dhclient-exit-hooks "$@"; then
        exit_status=$?
    fi

    # Now run scripts in the Debian-specific directory.
    if ! run_hookdir /etc/dhcp/dhclient-exit-hooks.d "$@"; then
        exit_status=$?
    fi

    exit $exit_status
}


# set up some variables for DHCPv4 handlers below
if [ -n "$new_interface_mtu" ] && [ $new_interface_mtu -ge 575 ]; then
    mtu_arg="mtu $new_interface_mtu"
fi


# The action starts here

# Invoke the local dhcp client enter hooks, if they exist.
run_hook /etc/dhcp/dhclient-enter-hooks
run_hookdir /etc/dhcp/dhclient-enter-hooks.d

# Execute the operation
case "$reason" in
    MEDIUM|ARPCHECK|ARPSEND)
        # Do nothing
        ;;
    PREINIT)
        # The DHCP client is requesting that an interface be
        # configured as required in order to send packets prior to
        # receiving an actual address. - dhclient-script(8)
        if [ -n "$alias_ip_address" ]; then
            ifconfig $interface inet -alias $alias_ip_address > /dev/null 2>&1
            route delete $alias_ip_address 127.0.0.1 > /dev/null 2>&1
        fi

        ifconfig $interface inet 0.0.0.0 netmask 0.0.0.0 \
            broadcast 255.255.255.255 up

        ;;

    BOUND|RENEW|REBIND|REBOOT)
        set_hostname

        if [ -n "$old_ip_address" ] && [ -n "$alias_ip_address" ] &&
           [ "$alias_ip_address" != "$old_ip_address" ]; then
            # Possible new alias. Remove old alias.
            ifconfig $interface inet -alias $alias_ip_address > /dev/null 2>&1
            route delete $alias_ip_address 127.0.0.1 > /dev/null 2>&1
        fi

        if [ -n "$old_ip_address" ] &&
           [ "$old_ip_address" != "$new_ip_address" ]; then
            ifconfig $interface inet -alias $old_ip_address $medium
            route delete $old_ip_address 127.1 >/dev/null 2>&1
            for router in $old_routers; do
              route delete default $router >/dev/null 2>&1 
            done
            if [ -n "$old_static_routes" ]; then
              set -- $old_static_routes
              while [ $# -gt 1 ]; do
                route delete $1 $2
                shift; shift
              done
            fi
            arp -n -a | sed -n -e 's/^.*(\(.*\)) at .*$/arp -d \1/p' |sh
        fi

        if [ -z "$old_ip_address" ] ||
           [ "$old_ip_address" != "$new_ip_address" ] ||
           [ "$reason" = "BOUND" ] || [ "$reason" = "REBOOT" ]; then
	    # FIXME: metric_arg is not defined
            ifconfig $interface inet $new_ip_address ${new_subnet_mask:+netmask $new_subnet_mask} \
                                ${new_broadcast_address:+broadcast $new_broadcast_address} $mtu_arg $metric_arg $medium
            route add $new_ip_address 127.1 >/dev/null 2>&1
            for router in $new_routers; do
              # If the subnet is captive, eg the netmask is /32 but the default
              # gateway is (obviously) outside of this, then we need to produce a
              # host route to reach the gateway.
              if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
                route add -host $router -interface $interface
              fi
              route add default $router >/dev/null 2>&1
            done

            if [ -n "$new_static_routes" ]; then
                set -- $new_static_routes
                while [ $# -gt 1 ]; do
                    route add $1 $2
                    shift; shift
                done
            fi
        else
          # we haven't changed the address, have we changed other options
          # that we wish to update?
          if [ x$new_routers != x ] && [ x$new_routers != x$old_routers ] ; then
            # if we've changed routers delete the old and add the new.
            for router in $old_routers; do
              route delete default $router >/dev/null 2>&1
            done
            for router in $new_routers; do
              # If the subnet is captive, eg the netmask is /32 but the default
              # gateway is (obviously) outside of this, then we need to produce a
              # host route to reach the gateway.
              if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
                route add -host $router -interface $interface
              fi
              route add default $router >/dev/null 2>&1
            done
          fi
        fi

        if [ -n "$alias_ip_address" ] &&
           [ "$new_ip_address" != "$alias_ip_address" ]; then
            ifconfig $interface inet alias $alias_ip_address \
                ${alias_subnet_mask:+netmask $alias_subnet_mask}
            route add $alias_ip_address 127.0.0.1
        fi

        make_resolv_conf

        ;;

    EXPIRE|FAIL|RELEASE|STOP)
        if [ -n "$alias_ip_address" ]; then
            # Turn off alias interface.
            ifconfig $interface inet -alias $alias_ip_address > /dev/null 2>&1
            route delete $alias_ip_address 127.0.0.1 > /dev/null 2>&1
        fi

        if [ -n "$old_ip_address" ]; then
            ifconfig $interface inet -alias $old_ip_address $medium
            route delete $old_ip_address 127.1 >/dev/null 2>&1
            for router in $old_routers; do
              route delete default $router >/dev/null 2>&1
            done
            if [ -n "$old_static_routes" ]; then
              set -- $old_static_routes
              while [ $# -gt 1 ]; do
                route delete $1 $2
                shift; shift
              done
            fi
            arp -n -a | sed -n -e 's/^.*(\(.*\)) at .*$/arp -d \1/p' \
                                                        |sh >/dev/null 2>&1
        fi

        if [ -n "$alias_ip_address" ]; then
	    # FIXME: alias_subnet_arg is not defined
            ifconfig $interface inet alias $alias_ip_address $alias_subnet_arg
            route add $alias_ip_address 127.0.0.1
        fi

        ;;

    TIMEOUT)
        if [ -n "$alias_ip_address" ]; then
            ifconfig $interface inet -alias $alias_ip_address > /dev/null 2>&1
            route delete $alias_ip_address 127.0.0.1 > /dev/null 2>&1
        fi

	# FIXME: metric_arg is not defined
        ifconfig $interface inet $new_ip_address ${new_subnet_mask:+netmask $new_subnet_mask} \
                              ${new_broadcast_address:+broadcast $new_broadcast_address} $mtu_arg $metric_arg $medium
        sleep 1


        if [ -n "$new_routers" ]; then
          set -- $new_routers
          if ping -q -c 1 $1; then
            if [ x$new_ip_address != x$alias_ip_address ] && \
                              [ x$alias_ip_address != x ]; then
	      # FIXME: alias_subnet_arg is not defined
              ifconfig $interface inet alias $alias_ip_address $alias_subnet_arg
              route add $alias_ip_address 127.0.0.1
            fi
            route add $new_ip_address 127.1 >/dev/null 2>&1
            for router in $new_routers; do
              if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
                route add -host $router -interface $interface
              fi
              route add default $router >/dev/null 2>&1
            done
            set -- $new_static_routes
            while [ $# -gt 1 ]; do
                route add $1 $2
                shift; shift
            done

            make_resolv_conf
          else
            exit_with_hooks 2 "$@"
          fi
        else
          ifconfig $interface inet -alias $new_ip_address $medium
          for router in $old_routers; do
            route delete default $router >/dev/null 2>&1
          done
          if [ -n "$old_static_routes" ]; then
            set -- $old_static_routes
            while [ $# -gt 1 ]; do
              route delete $1 $2
              shift; shift
            done
          fi
          arp -n -a | sed -n -e 's/^.*(\(.*\)) at .*$/arp -d \1/p' \
                                                                |sh >/dev/null 2>&1
        fi

        ;;
esac

exit_with_hooks 0
